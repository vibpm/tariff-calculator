{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f3440689-d183-45a8-8780-a3604e2a9fc0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω—ã. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —è—á–µ–π–∫–µ.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import openpyxl\n",
    "import os\n",
    "\n",
    "# --- –ù–ê–°–¢–†–û–ô–ö–ò ---\n",
    "# –ò–º—è –≤–∞—à–µ–≥–æ Excel —Ñ–∞–π–ª–∞ (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ª–µ–∂–∏—Ç –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ –Ω–æ—É—Ç–±—É–∫)\n",
    "FILENAME = 'calc.xlsm'\n",
    "\n",
    "# !!! –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' –∏ '–õ–∏—Å—Ç–†–∞—Å—á–µ—Ç–∞' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤–∞—à–∏—Ö –ª–∏—Å—Ç–æ–≤ —Å –ª–æ–≥–∏–∫–æ–π.\n",
    "SHEETS_WITH_LOGIC = ['–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '–†–∞—Å—á–µ—Ç –†–°', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π']\n",
    "\n",
    "# –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤, –∫—É–¥–∞ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n",
    "FORMULAS_OUTPUT_FILE = 'formulas_map.txt'\n",
    "DATA_OUTPUT_FOLDER = 'data_export' # –ü–∞–ø–∫–∞ –¥–ª—è CSV —Ñ–∞–π–ª–æ–≤\n",
    "\n",
    "print(\"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω—ã. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —è—á–µ–π–∫–µ.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "52eb949f-09ea-4a14-89db-410c9de5f832",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–§—É–Ω–∫—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫.\n"
     ]
    }
   ],
   "source": [
    "def extract_formulas(workbook, output_file):\n",
    "    \"\"\"\n",
    "    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º –≤ —Ñ–∞–π–ª–µ, –Ω–∞—Ö–æ–¥–∏—Ç —è—á–µ–π–∫–∏ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏\n",
    "    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.\n",
    "    \"\"\"\n",
    "    print(\">>> –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª...\")\n",
    "    with open(output_file, 'w', encoding='utf-8') as f:\n",
    "        for sheet_name in workbook.sheetnames:\n",
    "            sheet = workbook[sheet_name]\n",
    "            has_formulas_on_sheet = False\n",
    "            for row in sheet.iter_rows():\n",
    "                for cell in row:\n",
    "                    if cell.data_type == 'f':\n",
    "                        if not has_formulas_on_sheet:\n",
    "                            f.write(f\"\\n{'='*20} –õ–ò–°–¢: {sheet.title} {'='*20}\\n\\n\")\n",
    "                            has_formulas_on_sheet = True\n",
    "                        formula = cell.value\n",
    "                        f.write(f\"–Ø—á–µ–π–∫–∞: {cell.coordinate}\\t–§–æ—Ä–º—É–ª–∞: {formula}\\n\")\n",
    "    print(f\"‚úì –§–æ—Ä–º—É–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}\\n\")\n",
    "\n",
    "\n",
    "def extract_data_sheets(filename, sheets_to_ignore, output_folder):\n",
    "    \"\"\"\n",
    "    –ß–∏—Ç–∞–µ—Ç –ª–∏—Å—Ç—ã Excel, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ CSV.\n",
    "    \"\"\"\n",
    "    print(\">>> –®–∞–≥ 2: –≠–∫—Å–ø–æ—Ä—Ç –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤)...\")\n",
    "    if not os.path.exists(output_folder):\n",
    "        os.makedirs(output_folder)\n",
    "    try:\n",
    "        xls = pd.ExcelFile(filename)\n",
    "    except FileNotFoundError:\n",
    "        print(f\"!!! –û–®–ò–ë–ö–ê: –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.\")\n",
    "        return\n",
    "\n",
    "    for sheet_name in xls.sheet_names:\n",
    "        if sheet_name not in sheets_to_ignore:\n",
    "            print(f\"  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—Å—Ç '{sheet_name}' –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫...\")\n",
    "            df = pd.read_excel(xls, sheet_name=sheet_name)\n",
    "            csv_filename = os.path.join(output_folder, f\"{sheet_name}.csv\")\n",
    "            df.to_csv(csv_filename, index=False, encoding='utf-8-sig')\n",
    "            print(f\"    ‚úì –õ–∏—Å—Ç '{sheet_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {csv_filename}\")\n",
    "        else:\n",
    "            print(f\"  - –ü—Ä–æ–ø—É—Å–∫–∞—é –ª–∏—Å—Ç '{sheet_name}', —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ SHEETS_WITH_LOGIC.\")\n",
    "    print(\"\\n‚úì –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω.\\n\")\n",
    "\n",
    "print(\"–§—É–Ω–∫—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "34756bc0-7e3e-4e9c-98f2-d43393595d0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: calc.xlsm\n",
      "\n",
      ">>> –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\v.baldin\\AppData\\Local\\anaconda3\\Lib\\site-packages\\openpyxl\\worksheet\\_read_only.py:85: UserWarning: Data Validation extension is not supported and will be removed\n",
      "  for idx, row in parser.parse():\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úì –§–æ—Ä–º—É–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: formulas_map.txt\n",
      "\n",
      ">>> –®–∞–≥ 2: –≠–∫—Å–ø–æ—Ä—Ç –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤)...\n",
      "  - –ü—Ä–æ–ø—É—Å–∫–∞—é –ª–∏—Å—Ç '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ SHEETS_WITH_LOGIC.\n",
      "  - –ü—Ä–æ–ø—É—Å–∫–∞—é –ª–∏—Å—Ç '–†–∞—Å—á–µ—Ç –†–°', —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ SHEETS_WITH_LOGIC.\n",
      "  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—Å—Ç '–ü—Ä–∏–º–µ—Ä—ã_—Ä–∞—Å—á–µ—Ç –†–°' –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫...\n",
      "    ‚úì –õ–∏—Å—Ç '–ü—Ä–∏–º–µ—Ä—ã_—Ä–∞—Å—á–µ—Ç –†–°' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data_export\\–ü—Ä–∏–º–µ—Ä—ã_—Ä–∞—Å—á–µ—Ç –†–°.csv\n",
      "  - –ü—Ä–æ–ø—É—Å–∫–∞—é –ª–∏—Å—Ç '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π', —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ SHEETS_WITH_LOGIC.\n",
      "  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—Å—Ç '–ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç –ù–ú–í' –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫...\n",
      "    ‚úì –õ–∏—Å—Ç '–ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç –ù–ú–í' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data_export\\–ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç –ù–ú–í.csv\n",
      "  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—Å—Ç '–ö–ü' –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫...\n",
      "    ‚úì –õ–∏—Å—Ç '–ö–ü' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data_export\\–ö–ü.csv\n",
      "  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—Å—Ç '—Å–ø–∏—Å–∫–∏' –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫...\n",
      "    ‚úì –õ–∏—Å—Ç '—Å–ø–∏—Å–∫–∏' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data_export\\—Å–ø–∏—Å–∫–∏.csv\n",
      "  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—Å—Ç '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è' –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫...\n",
      "    ‚úì –õ–∏—Å—Ç '–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data_export\\–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.csv\n",
      "  - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—Å—Ç '–¢–ü' –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫...\n",
      "    ‚úì –õ–∏—Å—Ç '–¢–ü' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data_export\\–¢–ü.csv\n",
      "\n",
      "‚úì –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω.\n",
      "\n",
      "üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.\n"
     ]
    }
   ],
   "source": [
    "print(f\"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {FILENAME}\\n\")\n",
    "\n",
    "# –î–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º openpyxl —Å data_only=False\n",
    "try:\n",
    "    # read_only=True —É—Å–∫–æ—Ä—è–µ—Ç —á—Ç–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n",
    "    wb = openpyxl.load_workbook(FILENAME, data_only=False, read_only=True)\n",
    "except FileNotFoundError:\n",
    "    print(f\"!!! –û–®–ò–ë–ö–ê: –§–∞–π–ª {FILENAME} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ –≤–∞—à Jupyter –Ω–æ—É—Ç–±—É–∫.\")\n",
    "else:\n",
    "    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏\n",
    "    extract_formulas(wb, FORMULAS_OUTPUT_FILE)\n",
    "    extract_data_sheets(FILENAME, SHEETS_WITH_LOGIC, DATA_OUTPUT_FOLDER)\n",
    "    print(\"üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "78d87894-5739-440c-a20f-a34dba8e745a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: oletools in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (0.60.2)\n",
      "Requirement already satisfied: pyparsing<4,>=2.1.0 in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (from oletools) (3.2.0)\n",
      "Requirement already satisfied: olefile>=0.46 in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (from oletools) (0.47)\n",
      "Requirement already satisfied: easygui in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (from oletools) (0.98.3)\n",
      "Requirement already satisfied: colorclass in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (from oletools) (2.2.2)\n",
      "Requirement already satisfied: pcodedmp>=1.2.5 in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (from oletools) (1.2.6)\n",
      "Requirement already satisfied: msoffcrypto-tool in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (from oletools) (5.4.2)\n",
      "Requirement already satisfied: win-unicode-console in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (from pcodedmp>=1.2.5->oletools) (0.5)\n",
      "Requirement already satisfied: cryptography>=39.0 in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (from msoffcrypto-tool->oletools) (44.0.1)\n",
      "Requirement already satisfied: cffi>=1.12 in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (from cryptography>=39.0->msoffcrypto-tool->oletools) (1.17.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\v.baldin\\appdata\\local\\anaconda3\\lib\\site-packages (from cffi>=1.12->cryptography>=39.0->msoffcrypto-tool->oletools) (2.21)\n"
     ]
    }
   ],
   "source": [
    "!pip install -U oletools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "97b57f1c-cef5-4421-9099-ca41ce2a8509",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Encoding for stdout is only cp1251, will auto-encode text with utf8 before output\n"
     ]
    }
   ],
   "source": [
    "!olevba calc.xlsm > vba_code.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32f0d1ec-5cff-4fd9-a0d9-4f5e5cd0a348",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
